{"version":3,"sources":["component/Firebase/firebase.js","component/EnterMonth.js","component/ListeMonth.js","component/GraphYear.js","component/dashboard.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","EnterMonth","componentDidMount","updateInput","e","setState","target","name","value","console","log","state","updateStatsMonth","preventDefault","firestore","collection","doc","currentMonth","update","entreemois","sortiemois","className","Form","onSubmit","this","Row","Col","InputGroup","Prepend","Text","id","Control","as","onChange","placeholder","Append","Button","variant","type","Component","NewMonth","self","orderBy","get","then","querySnapshot","listMonth","forEach","push","catch","error","dataState","labels","datasets","data","backgroundColor","hoverBackgroundColor","month","exists","newState","Object","assign","ButtonToolbar","map","index","key","onClick","displayDataMonth","title","color","redraw","options","plugins","datalabels","display","GraphYear","props","dataMonth","yearEntree","yearSortie","parseInt","dataYearEntree","dataYearSortie","year","label","fill","lineTension","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","width","height","legend","fontColor","scales","yAxes","ticks","beginAtZero","min","AOS","init","Dashboard","showComponent","undefined","_onButtonClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c871da81.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyCath-DLr-wyEEutppS7TzEcCyLKFbE5EY\",\r\n    authDomain: \"etatbank.firebaseapp.com\",\r\n    databaseURL: \"https://etatbank.firebaseio.com\",\r\n    projectId: \"etatbank\",\r\n    storageBucket: \"etatbank.appspot.com\",\r\n    messagingSenderId: \"653688129489\",\r\n    appId: \"1:653688129489:web:bb7f7b4df74ada6e0342f0\"\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;","import React, { Component } from \"react\";\r\n\r\nimport firebase from \"./Firebase/firebase\";\r\n\r\nimport { Form, Row, Col, InputGroup, Button } from \"react-bootstrap\";\r\n\r\nclass EnterMonth extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            entreemois: \"\",\r\n            sortiemois: \"\",\r\n            currentMonth: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {};\r\n\r\n    updateInput = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n        console.log(this.state);\r\n    };\r\n    updateStatsMonth = e => {\r\n        e.preventDefault();\r\n        const db = firebase.firestore();\r\n        db.collection(\"users\")\r\n            .doc(\"antoine\")\r\n            .collection(\"years\")\r\n            .doc(\"2019\")\r\n            .collection(\"mois\")\r\n            .doc(this.state.currentMonth)\r\n            .update({\r\n                entreemois: this.state.entreemois,\r\n                sortiemois: this.state.sortiemois\r\n            });\r\n        this.setState({\r\n            entreemois: \"\",\r\n            sortiemois: \"\"\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper-stats-month\">\r\n                <h3>Nouvelles données :</h3>\r\n\r\n                <Form className=\"form-test\" onSubmit={this.updateStatsMonth}>\r\n                    <Row>\r\n                        <Col>\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Text id=\"inputGroupPrepend\">\r\n                                        Mois\r\n                                    </InputGroup.Text>\r\n                                </InputGroup.Prepend>\r\n                                <Form.Control\r\n                                    as=\"select\"\r\n                                    name=\"currentMonth\"\r\n                                    id=\"month-select\"\r\n                                    onChange={this.updateInput}\r\n                                >\r\n                                    <option value=\"Janvier\">Janvier</option>\r\n                                    <option value=\"Février\">Février</option>\r\n                                    <option value=\"Mars\">Mars</option>\r\n                                    <option value=\"Avril\">Avril</option>\r\n                                    <option value=\"Mai\">Mai</option>\r\n                                    <option value=\"Juin\">Juin</option>\r\n                                    <option value=\"Juillet\">Juillet</option>\r\n                                    <option value=\"Août\">Août</option>\r\n                                    <option value=\"Septembre\">Septembre</option>\r\n                                    <option value=\"Octobre\">Octobre</option>\r\n                                    <option value=\"Novembre\">Novembre</option>\r\n                                    <option value=\"Décembre\">Décembre</option>\r\n                                </Form.Control>\r\n                            </InputGroup>\r\n                        </Col>\r\n                        <Col>\r\n                            <InputGroup>\r\n                                <Form.Control\r\n                                    placeholder=\"Entrée du mois\"\r\n                                    onChange={this.updateInput}\r\n                                    value={this.state.entreemois}\r\n                                />\r\n                                <InputGroup.Append>\r\n                                    <InputGroup.Text id=\"inputGroupAppend\">\r\n                                        €\r\n                                    </InputGroup.Text>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </Col>\r\n                        <Col>\r\n                            <InputGroup>\r\n                                <Form.Control\r\n                                    placeholder=\"Sortie du mois\"\r\n                                    onChange={this.updateInput}\r\n                                    value={this.state.sortiemois}\r\n                                />\r\n                                <InputGroup.Append>\r\n                                    <InputGroup.Text id=\"inputGroupAppend\">\r\n                                        €\r\n                                    </InputGroup.Text>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button variant=\"success\" type=\"submit\">\r\n                                Envoyer\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default EnterMonth; // Don’t forget to use export default!\r\n","import React, { Component } from \"react\";\r\n\r\nimport firebase from \"./Firebase/firebase\";\r\n\r\nimport { ButtonToolbar, Button } from \"react-bootstrap\";\r\n\r\n\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nimport \"chartjs-plugin-datalabels\";\r\n\r\nclass NewMonth extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            listMonth: [],\r\n            dataState: {\r\n                labels: [\"Entrée\", \"Sortie\"],\r\n                datasets: [\r\n                    {\r\n                        data: [],\r\n                        backgroundColor: [\"#5ac492\", \"#d6535d\"],\r\n                        hoverBackgroundColor: [\"#5ac492\", \"#d6535d\"]\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        var self = this;\r\n\r\n        const db = firebase.firestore();\r\n        const dataMonth = db\r\n            .collection(\"users\")\r\n            .doc(\"antoine\")\r\n            .collection(\"years\")\r\n            .doc(\"2019\")\r\n            .collection(\"mois\")\r\n            .orderBy(\"order\", \"asc\");\r\n\r\n        dataMonth\r\n            .get()\r\n            .then(function(querySnapshot) {\r\n                let listMonth = [];\r\n                querySnapshot.forEach(doc => {\r\n                    listMonth.push(doc.id);\r\n                    self.setState({\r\n                        listMonth: listMonth\r\n                    });\r\n                });\r\n            })\r\n            .catch(function(error) {\r\n                console.log(\"Error getting document:\", error);\r\n            });\r\n    };\r\n\r\n    displayDataMonth(month) {\r\n        this.setState({currentMonth: month});\r\n\r\n\r\n        var self = this;\r\n        const db = firebase.firestore();\r\n        const dataMonth = db\r\n            .collection(\"users\")\r\n            .doc(\"antoine\")\r\n            .collection(\"years\")\r\n            .doc(\"2019\")\r\n            .collection(\"mois\")\r\n            .doc(month);\r\n\r\n        dataMonth\r\n            .get()\r\n            .then(function(doc) {\r\n                if (doc.exists) {\r\n                    let newState = Object.assign({}, self.state);\r\n                    newState.dataState.datasets[0].data = [\r\n                        doc.data().entreemois,\r\n                        doc.data().sortiemois\r\n                    ];\r\n                    self.setState(newState);\r\n                } else {\r\n                    // doc.data() will be undefined in this case\r\n                    console.log(\"No such document!\");\r\n                }\r\n            })\r\n            .catch(function(error) {\r\n                console.log(\"Error getting document:\", error);\r\n            });\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper-new-month\">\r\n                <ButtonToolbar>\r\n                    <ul className=\"list-mois\">\r\n                        {this.state.listMonth.map(function(name, index) {\r\n                            return (\r\n                                <li key={index}>\r\n                                    <Button\r\n                                        variant=\"secondary\"\r\n                                        className={(this.state.currentMonth === name) ? \"btn-success\" : null}\r\n                                        onClick={() => {\r\n                                            this.displayDataMonth(name);\r\n                                        }}\r\n                                    >\r\n                                        {name}\r\n                                    </Button>\r\n                                </li>\r\n                            );\r\n                        }, this)}\r\n                    </ul>\r\n                </ButtonToolbar>\r\n                <Doughnut\r\n                    data={this.state.dataState}\r\n                    title=\"My amazing data\"\r\n                    color=\"#70CAD1\"\r\n                    redraw\r\n                    options={{\r\n                        plugins: {\r\n                            datalabels: { display: true, color: \"white\" }\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewMonth; // Don’t forget to use export default!\r\n","import React, { Component } from \"react\";\r\n\r\nimport firebase from \"./Firebase/firebase\";\r\n\r\nimport { Doughnut, Line } from \"react-chartjs-2\";\r\n\r\n\r\nclass GraphYear extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            year: [],\r\n            dataMonth: [],\r\n            dataYearEntree: [],\r\n            dataYearSortie: []\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        var self = this;\r\n        const db = firebase.firestore();\r\n        const dataYear = db\r\n            .collection(\"users\")\r\n            .doc(\"antoine\")\r\n            .collection(\"years\")\r\n            .doc(\"2019\")\r\n            .collection(\"mois\")\r\n            .orderBy(\"order\", \"asc\");\r\n\r\n        dataYear\r\n            .get()\r\n            .then(function(querySnapshot) {\r\n                let dataMonth = [];\r\n                var yearEntree= [];\r\n                var yearSortie= [];\r\n\r\n                querySnapshot.forEach(function(doc) {\r\n                    dataMonth.push([\r\n                        doc.id,\r\n                        doc.data().entreemois,\r\n                        doc.data().sortiemois\r\n                    ]);\r\n                    self.setState({\r\n                        dataMonth: dataMonth\r\n                    });\r\n                    // console.log(self.state.dataMonth);\r\n\r\n                    if (doc.data().entreemois > 0) {\r\n                        yearEntree.push(parseInt(doc.data().entreemois));\r\n                    } else {\r\n                        yearEntree.push(0);\r\n                    }\r\n                    if (doc.data().sortiemois > 0) {\r\n                        yearSortie.push(parseInt(doc.data().sortiemois));\r\n                    } else {\r\n                        yearSortie.push(0);\r\n                    }\r\n                    self.setState({\r\n                        dataYearEntree: yearEntree,\r\n                        dataYearSortie: yearSortie\r\n                    });\r\n                });\r\n            })\r\n            .catch(function(error) {\r\n                console.log(\"Error getting document:\", error);\r\n            });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper-data-month\">\r\n                <h3>Graph de l'année</h3>\r\n\r\n                <Line\r\n                    redraw\r\n                    data={{\r\n                        labels: [\"Janvier\", \"Février\", \"Mars\", \"Avril\", \"Mai\", \"Juin\", \"Juillet\", \"Août\", \"Septembre\", \"Octobre\", \"Novembre\", \"Décembre\"],\r\n                        datasets: [\r\n                            {\r\n                                label: \"Entrée\",\r\n                                fill: false,\r\n                                lineTension: 0.1,\r\n                                backgroundColor: \"rgba(67, 233, 70,0.4)\",\r\n                                borderColor: \"rgba(67, 233, 70,1)\",\r\n                                borderCapStyle: \"butt\",\r\n                                borderDash: [],\r\n                                borderDashOffset: 0.0,\r\n                                borderJoinStyle: \"miter\",\r\n                                pointBorderColor: \"rgba(67, 233, 70,1)\",\r\n                                pointBackgroundColor: \"#fff\",\r\n                                pointBorderWidth: 1,\r\n                                pointHoverRadius: 5,\r\n                                pointHoverBackgroundColor: \"rgba(67, 233, 70,1)\",\r\n                                pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n                                pointHoverBorderWidth: 2,\r\n                                pointRadius: 1,\r\n                                pointHitRadius: 10,\r\n                                data: this.state.dataYearEntree\r\n                            },\r\n                            {\r\n                                label: \"Sortie\",\r\n                                fill: false,\r\n                                lineTension: 0.1,\r\n                                backgroundColor: \"rgba(233, 67, 67,0.7)\",\r\n                                borderColor: \"rgba(233, 67, 67,1)\",\r\n                                borderCapStyle: \"butt\",\r\n                                borderDash: [],\r\n                                borderDashOffset: 0.0,\r\n                                borderJoinStyle: \"miter\",\r\n                                pointBorderColor: \"rgba(233, 67, 67,1)\",\r\n                                pointBackgroundColor: \"#fff\",\r\n                                pointBorderWidth: 1,\r\n                                pointHoverRadius: 5,\r\n                                pointHoverBackgroundColor: \"rgba(233, 67, 67,1)\",\r\n                                pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n                                pointHoverBorderWidth: 2,\r\n                                pointRadius: 1,\r\n                                pointHitRadius: 10,\r\n                                data: this.state.dataYearSortie\r\n                            }\r\n                        ]\r\n                    }}\r\n                    width={800}\r\n                    height={300}\r\n                    options={{\r\n                        // maintainAspectRatio: true,\r\n                        pointBorderColor  : \"#FFFFFF\",\r\n\r\n                        legend: {\r\n                            labels: {\r\n                                // This more specific font property overrides the global property\r\n                                fontColor: 'white'\r\n                            }\r\n                        },\r\n                        scales: {\r\n                            yAxes: [\r\n                                {\r\n                                    ticks: {\r\n                                        beginAtZero: true,\r\n                                        min: 0,\r\n                                        // max: 2000\r\n                                    }\r\n                                }\r\n                            ]\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default GraphYear; // Don’t forget to use export default!\r\n","import React, { Component } from \"react\";\r\n\r\nimport AOS from \"aos\";\r\nimport \"aos/dist/aos.css\";\r\n\r\nimport EnterMonth from \"./EnterMonth\";\r\nimport NewMonth from \"./ListeMonth\";\r\nimport GraphYear from \"./GraphYear\";\r\n// import DataMonth from \"./DataMonth\";\r\n\r\nAOS.init();\r\n\r\nclass Dashboard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"dashboard\">\r\n        <div className=\"menu-header\">\r\n          <div className=\"logo-wrapper\">\r\n            {/* <img className=\"logo\" src={logo} alt=\"Logo CodeBox\"/> */}\r\n            <span>EtatBank</span>\r\n          </div>\r\n          <ul>\r\n            <li\r\n              className={\r\n                this.state.showComponent === \"aos\" ? \"active\" : undefined\r\n              }\r\n            >\r\n              <span onClick={() => this._onButtonClick(\"aos\")}>\r\n                Entrée du mois\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"content-element\">\r\n          <EnterMonth  currentMonth={'Mai'} />\r\n          <NewMonth />\r\n          <GraphYear />\r\n          {/* <DataMonth /> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Dashboard; // Don’t forget to use export default!\r\n","import React, { Component } from 'react';\n\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport './style.css';\n\n\nimport Dashboard from './component/dashboard';\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n    }\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <Dashboard />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}